{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String"
        },
        "DockerUsername": {
            "Description": "Dockerhub username for pulling docker images for the services",
            "Type": "String"
        }
    },    
    "Mappings": {
        "RegionToAMIMap": {
            "us-east-1": {
                "AMI": "ami-0323c3dd2da7fb37d"
            },
            "us-east-2": {
                "AMI": "ami-0f7919c33c90f5b58"
            },
            "us-west-1": {
                "AMI": "ami-06fcc1f0bc2c8943f"
            },
            "us-west-2": {
                "AMI": "ami-0d6621c01e8c2de2c"
            }
        }
    },
    "Resources" : {
        "FinexProductSvcZone1" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Join" : [ "", [
                        {
                            "Ref" : "AWS::Region"
                        },
                        "a"
                    ] 
                ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAMIMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },          
                "KeyName" : { 
                    "Ref" : "KeyName"
                },
                "SecurityGroupIds" : [{ 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSgId" 
                    }
                } ], 
                "SubnetId" : { 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSubnetIdZone1" 
                    }
                },
                "InstanceType" : "t2.micro",
                "IamInstanceProfile" : "AdminAccess",
                "Tags" : [ { 
                        "Key" : "Name",
                        "Value" : "finex-product-svc-zone1"
                    }, {
                        "Key" : "Cloudformation",
                        "Value" : "Yes"
                    }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -ex", "\n",
                                "yum update -y", "\n",
                                "yum install docker -y", "\n",
                                "systemctl start docker", "\n",
                                "systemctl enable docker", "\n",
                                "usermod -aG docker ec2-user", "\n",
                                "yum install gcc -y", "\n",
                                "yum install python-pip -y", "\n",
                                "yum install postgresql-devel python-devel -y", "\n",
                                "pip install pgcli==2.2.0", "\n",
                                "docker pull ",
                                { "Ref" : "DockerUsername" },
                                "/finex-products-aws:latest", "\n",
                                "mkdir ~ec2-user/finex-security", "\n",
                                "aws s3 cp s3://finex-security/finex-product.p12 ~ec2-user/finex-security/keystore.p12", "\n",
                                "aws s3 cp s3://finex-security/product.txt ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "aws s3 cp s3://finex-security/internal-ca.crt ~ec2-user/finex-security/", "\n",
                                "chown -R ec2-user ~ec2-user/finex-security", "\n",
                                "chgrp -R ec2-user ~ec2-user/finex-security", "\n",
                                "chmod 700 ~ec2-user/finex-security", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore.p12", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "chmod 600 ~ec2-user/finex-security/internal-ca.crt", "\n",
                                "echo \"#!/bin/bash\" >>  ~ec2-user/run-product-svc.sh", "\n",
                                "echo \"docker run -d -v /home/ec2-user/finex-security:/finex-security -p 443:8443 ",
                                "-e TLS_KEYSTORE=/finex-security/keystore.p12 ",
                                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/finex-security/keystore-pass.txt` ",
                                "-e spring_profiles=aws ",
                                "-e ZIPKIN_SENDER_TYPE=kafka ",
                                "-e KAFKA_BOOTSTRAP_SERVERS=\"", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone1Dns" } }, ":9092,",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone2Dns" } }, ":9092", "\" ", 
                                "-e config_server_uri=https://", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, " ",
                                "-e FINEX_DISCOVERY_URI=https://",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, "/eureka ",
                                "-e FINEX_DISCOVERY_CLIENT_HOSTNAME=i1.product.finex.com ",
                                "--name finex-product ", 
                                { "Ref" : "DockerUsername" },
                                "/finex-products-aws:latest\" >> ~ec2-user/run-product-svc.sh", "\n",
                                "chown ec2-user ~ec2-user/run-product-svc.sh", "\n",
                                "chgrp ec2-user ~ec2-user/run-product-svc.sh", "\n",
                                "chmod 755 ~ec2-user/run-product-svc.sh", "\n",
                                "~ec2-user/run-product-svc.sh", "\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        }, 
        "FinexParticipantSvcZone1" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Join" : [ "", [
                        {
                            "Ref" : "AWS::Region"
                        },
                        "a"
                    ] 
                ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAMIMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },          
                "KeyName" : { 
                    "Ref" : "KeyName"
                },
                "SecurityGroupIds" : [{ 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSgId" 
                    }
                } ], 
                "SubnetId" : { 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSubnetIdZone1" 
                    }
                },
                "InstanceType" : "t2.micro",
                "IamInstanceProfile" : "AdminAccess",
                "Tags" : [ { 
                        "Key" : "Name",
                        "Value" : "finex-participant-svc-zone1"
                    }, {
                        "Key" : "Cloudformation",
                        "Value" : "Yes"
                    }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -ex", "\n",
                                "yum update -y", "\n",
                                "yum install docker -y", "\n",
                                "systemctl start docker", "\n",
                                "systemctl enable docker", "\n",
                                "usermod -aG docker ec2-user", "\n",
                                "yum install gcc -y", "\n",
                                "yum install python-pip -y", "\n",
                                "yum install postgresql-devel python-devel -y", "\n",
                                "pip install pgcli==2.2.0", "\n",
                                "docker pull ",
                                { "Ref" : "DockerUsername" },
                                "/finex-participants-aws:latest", "\n",
                                "mkdir ~ec2-user/finex-security", "\n",
                                "aws s3 cp s3://finex-security/finex-participant.p12 ~ec2-user/finex-security/keystore.p12", "\n",
                                "aws s3 cp s3://finex-security/participant.txt ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "aws s3 cp s3://finex-security/internal-ca.crt ~ec2-user/finex-security/", "\n",
                                "chown -R ec2-user ~ec2-user/finex-security", "\n",
                                "chgrp -R ec2-user ~ec2-user/finex-security", "\n",
                                "chmod 700 ~ec2-user/finex-security", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore.p12", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "chmod 600 ~ec2-user/finex-security/internal-ca.crt", "\n",
                                "echo \"#!/bin/bash\" >>  ~ec2-user/run-participant-svc.sh", "\n",
                                "echo \"docker run -d -v /home/ec2-user/finex-security:/finex-security -p 443:8443 ",
                                "-e TLS_KEYSTORE=/finex-security/keystore.p12 ",
                                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/finex-security/keystore-pass.txt` ",
                                "-e spring_profiles=aws ",
                                "-e ZIPKIN_SENDER_TYPE=kafka ",
                                "-e KAFKA_BOOTSTRAP_SERVERS=\"", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone1Dns" } }, ":9092,",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone2Dns" } }, ":9092", "\" ", 
                                "-e config_server_uri=https://", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, " ",
                                "-e FINEX_DISCOVERY_URI=https://",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, "/eureka ",
                                "-e FINEX_DISCOVERY_CLIENT_HOSTNAME=i1.participant.finex.com ",
                                "--name finex-participant ", 
                                { "Ref" : "DockerUsername" },
                                "/finex-participants-aws:latest\" >> ~ec2-user/run-participant-svc.sh", "\n",
                                "chown ec2-user ~ec2-user/run-participant-svc.sh", "\n",
                                "chgrp ec2-user ~ec2-user/run-participant-svc.sh", "\n",
                                "chmod 755 ~ec2-user/run-participant-svc.sh", "\n",
                                "~ec2-user/run-participant-svc.sh", "\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "FinexOrderSvcZone1" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Join" : [ "", [
                        {
                            "Ref" : "AWS::Region"
                        },
                        "a"
                    ] 
                ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAMIMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },          
                "KeyName" : { 
                    "Ref" : "KeyName"
                },
                "SecurityGroupIds" : [{ 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSgId" 
                    }
                } ], 
                "SubnetId" : { 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSubnetIdZone1" 
                    }
                },
                "InstanceType" : "t2.micro",
                "IamInstanceProfile" : "AdminAccess",
                "Tags" : [ { 
                        "Key" : "Name",
                        "Value" : "finex-order-svc-zone1"
                    }, {
                        "Key" : "Cloudformation",
                        "Value" : "Yes"
                    }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -ex", "\n",
                                "yum update -y", "\n",
                                "yum install docker -y", "\n",
                                "systemctl start docker", "\n",
                                "systemctl enable docker", "\n",
                                "usermod -aG docker ec2-user", "\n",
                                "yum install gcc -y", "\n",
                                "yum install python-pip -y", "\n",
                                "yum install postgresql-devel python-devel -y", "\n",
                                "pip install pgcli==2.2.0", "\n",
                                "docker pull ",
                                { "Ref" : "DockerUsername" },
                                "/finex-orders-aws:latest", "\n",
                                "mkdir ~ec2-user/finex-security", "\n",
                                "aws s3 cp s3://finex-security/finex-order.p12 ~ec2-user/finex-security/keystore.p12", "\n",
                                "aws s3 cp s3://finex-security/order.txt ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "aws s3 cp s3://finex-security/internal-ca.crt ~ec2-user/finex-security/", "\n",
                                "chown -R ec2-user ~ec2-user/finex-security", "\n",
                                "chgrp -R ec2-user ~ec2-user/finex-security", "\n",
                                "chmod 700 ~ec2-user/finex-security", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore.p12", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "chmod 600 ~ec2-user/finex-security/internal-ca.crt", "\n",
                                "echo \"#!/bin/bash\" >>  ~ec2-user/run-order-svc.sh", "\n",
                                "echo \"docker run -d -v /home/ec2-user/finex-security:/finex-security -p 443:8443 ",
                                "-e TLS_KEYSTORE=/finex-security/keystore.p12 ",
                                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/finex-security/keystore-pass.txt` ",
                                "-e spring_profiles=aws ",
                                "-e ZIPKIN_SENDER_TYPE=kafka ",
                                "-e KAFKA_BOOTSTRAP_SERVERS=\"", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone1Dns" } }, ":9092,",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone2Dns" } }, ":9092", "\" ", 
                                "-e config_server_uri=https://", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, " ",
                                "-e FINEX_DISCOVERY_URI=https://",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, "/eureka ",
                                "-e FINEX_DISCOVERY_CLIENT_HOSTNAME=i1.order.finex.com ",
                                "--name finex-order ", 
                                { "Ref" : "DockerUsername" },
                                "/finex-orders-aws:latest\" >> ~ec2-user/run-order-svc.sh", "\n",
                                "chown ec2-user ~ec2-user/run-order-svc.sh", "\n",
                                "chgrp ec2-user ~ec2-user/run-order-svc.sh", "\n",
                                "chmod 755 ~ec2-user/run-order-svc.sh", "\n",
                                "~ec2-user/run-order-svc.sh", "\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "FinexOrderbookSvcZone1" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Join" : [ "", [
                        {
                            "Ref" : "AWS::Region"
                        },
                        "a"
                    ] 
                ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAMIMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },          
                "KeyName" : { 
                    "Ref" : "KeyName"
                },
                "SecurityGroupIds" : [{ 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSgId" 
                    }
                } ], 
                "SubnetId" : { 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSubnetIdZone1" 
                    }
                },
                "InstanceType" : "t2.micro",
                "IamInstanceProfile" : "AdminAccess",
                "Tags" : [ { 
                        "Key" : "Name",
                        "Value" : "finex-orderbook-svc-zone1"
                    }, {
                        "Key" : "Cloudformation",
                        "Value" : "Yes"
                    }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -ex", "\n",
                                "yum update -y", "\n",
                                "yum install docker -y", "\n",
                                "systemctl start docker", "\n",
                                "systemctl enable docker", "\n",
                                "usermod -aG docker ec2-user", "\n",
                                "yum install gcc -y", "\n",
                                "yum install python-pip -y", "\n",
                                "yum install postgresql-devel python-devel -y", "\n",
                                "pip install pgcli==2.2.0", "\n",
                                "docker pull ",
                                { "Ref" : "DockerUsername" },
                                "/finex-orderbooks-aws:latest", "\n",
                                "mkdir ~ec2-user/finex-security", "\n",
                                "aws s3 cp s3://finex-security/finex-orderbook.p12 ~ec2-user/finex-security/keystore.p12", "\n",
                                "aws s3 cp s3://finex-security/orderbook.txt ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "aws s3 cp s3://finex-security/internal-ca.crt ~ec2-user/finex-security/", "\n",
                                "chown -R ec2-user ~ec2-user/finex-security", "\n",
                                "chgrp -R ec2-user ~ec2-user/finex-security", "\n",
                                "chmod 700 ~ec2-user/finex-security", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore.p12", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "chmod 600 ~ec2-user/finex-security/internal-ca.crt", "\n",
                                "echo \"#!/bin/bash\" >>  ~ec2-user/run-orderbook-svc.sh", "\n",
                                "echo \"docker run -d -v /home/ec2-user/finex-security:/finex-security -p 443:8443 ",
                                "-e TLS_KEYSTORE=/finex-security/keystore.p12 ",
                                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/finex-security/keystore-pass.txt` ",
                                "-e spring_profiles=aws ",
                                "-e ZIPKIN_SENDER_TYPE=kafka ",
                                "-e KAFKA_BOOTSTRAP_SERVERS=\"", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone1Dns" } }, ":9092,",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone2Dns" } }, ":9092", "\" ", 
                                "-e config_server_uri=https://", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, " ",
                                "-e FINEX_DISCOVERY_URI=https://",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, "/eureka ",
                                "-e FINEX_DISCOVERY_CLIENT_HOSTNAME=i1.orderbook.finex.com ",
                                "--name finex-orderbook ", 
                                { "Ref" : "DockerUsername" },
                                "/finex-orderbooks-aws:latest\" >> ~ec2-user/run-orderbook-svc.sh", "\n",
                                "chown ec2-user ~ec2-user/run-orderbook-svc.sh", "\n",
                                "chgrp ec2-user ~ec2-user/run-orderbook-svc.sh", "\n",
                                "chmod 755 ~ec2-user/run-orderbook-svc.sh", "\n",
                                "~ec2-user/run-orderbook-svc.sh", "\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "FinexTradeSvcZone1" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : {
                    "Fn::Join" : [ "", [
                        {
                            "Ref" : "AWS::Region"
                        },
                        "a"
                    ] 
                ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAMIMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },          
                "KeyName" : { 
                    "Ref" : "KeyName"
                },
                "SecurityGroupIds" : [{ 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSgId" 
                    }
                } ], 
                "SubnetId" : { 
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexAppSubnetIdZone1" 
                    }
                },
                "InstanceType" : "t2.micro",
                "IamInstanceProfile" : "AdminAccess",
                "Tags" : [ { 
                        "Key" : "Name",
                        "Value" : "finex-trade-svc-zone1"
                    }, {
                        "Key" : "Cloudformation",
                        "Value" : "Yes"
                    }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -ex", "\n",
                                "yum update -y", "\n",
                                "yum install docker -y", "\n",
                                "systemctl start docker", "\n",
                                "systemctl enable docker", "\n",
                                "usermod -aG docker ec2-user", "\n",
                                "yum install gcc -y", "\n",
                                "yum install python-pip -y", "\n",
                                "yum install postgresql-devel python-devel -y", "\n",
                                "pip install pgcli==2.2.0", "\n",
                                "docker pull ",
                                { "Ref" : "DockerUsername" },
                                "/finex-trades-aws:latest", "\n",
                                "mkdir ~ec2-user/finex-security", "\n",
                                "aws s3 cp s3://finex-security/finex-trade.p12 ~ec2-user/finex-security/keystore.p12", "\n",
                                "aws s3 cp s3://finex-security/trade.txt ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "aws s3 cp s3://finex-security/internal-ca.crt ~ec2-user/finex-security/", "\n",
                                "chown -R ec2-user ~ec2-user/finex-security", "\n",
                                "chgrp -R ec2-user ~ec2-user/finex-security", "\n",
                                "chmod 700 ~ec2-user/finex-security", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore.p12", "\n",
                                "chmod 600 ~ec2-user/finex-security/keystore-pass.txt", "\n",
                                "chmod 600 ~ec2-user/finex-security/internal-ca.crt", "\n",
                                "echo \"#!/bin/bash\" >>  ~ec2-user/run-trade-svc.sh", "\n",
                                "echo \"docker run -d -v /home/ec2-user/finex-security:/finex-security -p 443:8443 ",
                                "-e TLS_KEYSTORE=/finex-security/keystore.p12 ",
                                "-e TLS_KEYSTORE_PASSWORD=`cat  /home/ec2-user/finex-security/keystore-pass.txt` ",
                                "-e spring_profiles=aws ",
                                "-e ZIPKIN_SENDER_TYPE=kafka ",
                                "-e KAFKA_BOOTSTRAP_SERVERS=\"", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone1Dns" } }, ":9092,",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexKafka1Zone2Dns" } }, ":9092", "\" ", 
                                "-e config_server_uri=https://", 
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, " ",
                                "-e FINEX_DISCOVERY_URI=https://",
                                { "Fn::ImportValue" :  { "Fn::Sub": "FinexInternalAlbDnsName"  } }, "/eureka ",
                                "-e FINEX_DISCOVERY_CLIENT_HOSTNAME=i1.trade.finex.com ",
                                "--name finex-trade ", 
                                { "Ref" : "DockerUsername" },
                                "/finex-trades-aws:latest\" >> ~ec2-user/run-trade-svc.sh", "\n",
                                "chown ec2-user ~ec2-user/run-trade-svc.sh", "\n",
                                "chgrp ec2-user ~ec2-user/run-trade-svc.sh", "\n",
                                "chmod 755 ~ec2-user/run-trade-svc.sh", "\n",
                                "~ec2-user/run-trade-svc.sh", "\n",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "FinexProductSvcZone1DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexPrivateHostedZoneId" 
                    }
                },
                "Name" : "i1.product.finex.com",
                "ResourceRecords" : [
                   {
                        "Fn::GetAtt" : [
                            "FinexProductSvcZone1",
                            "PrivateIp"
                        ]    
                   }
                ],
                "TTL" : "300",
                "Type" : "A"
             }
        },
        "FinexParticipantSvcZone1DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexPrivateHostedZoneId" 
                    }
                },
                "Name" : "i1.participant.finex.com",
                "ResourceRecords" : [
                   {
                        "Fn::GetAtt" : [
                            "FinexParticipantSvcZone1",
                            "PrivateIp"
                        ]    
                   }
                ],
                "TTL" : "300",
                "Type" : "A"
             }
        },
        "FinexOrderSvcZone1DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexPrivateHostedZoneId" 
                    }
                },
                "Name" : "i1.order.finex.com",
                "ResourceRecords" : [
                   {
                        "Fn::GetAtt" : [
                            "FinexOrderSvcZone1",
                            "PrivateIp"
                        ]    
                   }
                ],
                "TTL" : "300",
                "Type" : "A"
             }
        },
        "FinexOrderbookSvcZone1DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexPrivateHostedZoneId" 
                    }
                },
                "Name" : "i1.orderbook.finex.com",
                "ResourceRecords" : [
                   {
                        "Fn::GetAtt" : [
                            "FinexOrderbookSvcZone1",
                            "PrivateIp"
                        ]    
                   }
                ],
                "TTL" : "300",
                "Type" : "A"
             }
        },
        "FinexTradeSvcZone1DNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneId" : {
                    "Fn::ImportValue" :  {
                        "Fn::Sub": "FinexPrivateHostedZoneId" 
                    }
                },
                "Name" : "i1.trade.finex.com",
                "ResourceRecords" : [
                   {
                        "Fn::GetAtt" : [
                            "FinexTradeSvcZone1",
                            "PrivateIp"
                        ]    
                   }
                ],
                "TTL" : "300",
                "Type" : "A"
             }
        },

    }
}